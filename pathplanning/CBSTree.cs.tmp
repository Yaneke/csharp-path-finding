using System;
using System.Collections.Generic;
using Priority_Queue;
using PathPlanning.Common;


namespace PathPlanning.Search {
    /// <summary>
    /// The Conflict-Based Search (CBS) tree is the main structure used to solve Multi-Agent Path Finding.
    /// Its search method creates a root node and starts splitting and exploring nodes on a best-first basis.
    /// Performance improvements have been implemented from the "improved CBS" (ICBS) algorithm.
    /// </summary>
    /// Meta-Agent (MA) improvements suggested in CBS and ICBS have not been implemented.
    /// Modifications have been made to provide the full set of solutions instead of the first optimal solution.
    /// 
    /// CBS algorithm: https://doi.org/10.1016/j.artint.2014.11.006
    /// ICBS algorithm: https://www.aaai.org/ocs/index.php/SOCS/SOCS15/paper/view/10974
    /// 
    /// Further enhancements to this algorithm may be provided by 
    /// Better heuristics: https://aaai.org/ocs/index.php/ICAPS/ICAPS18/paper/view/17735
    /// Disjoint splitting: https://aaai.org/ojs/index.php/ICAPS/article/view/3487
    /// Symmetry-breaking constraints: https://people.eng.unimelb.edu.au/pstuckey/papers/mapf-rect.pdf
    public class CBSTree {
        IGraph graph; // Reference to the multi-agent graph.
        Node root; // Root of the tree, created upon <search cref=Search>.
        SimplePriorityQueue<Node, float> openSet; // Set of nodes to explore, ordered by priority (lowest cost first).
        List<AStar> solvers; // Maps each pawn to its dedicated AStar solver.
        private delegate float Cost(Solution solution);
        private Cost solutionCost; // Assigns a cost to any solution.
        private delegate Solution Filter(Solution solution);
        private Filter solutionYield; // Filters all final solutions to maintain certain properties.
        int maxMoveCount = 100; // Arbitrary bound on number of moves, required for CostModel.SumMoves
        float costLimit; // Cost of optimal solutions, if any found (otherwise, upper bound on max cost)
        private int exploredLast, exploredLastAStar; // nodes explored by high-level (CBS) for last search and in total
        private int exploredTotal, exploredTotalAStar; // nodes explored by low-level (A*) for last search and in total

        /// <summary>
        /// Creates a CBSTree instance with dedicated AStar solvers for each pawn of the graph.
        /// </summary>
        /// <param name="graph">The graph for which to find conflict-free paths in.</param>
        /// <param name="costModel">Defines what cost function to minimize within solutions (see <DefineCosts cref=DefineCosts>).</param> 
        public CBSTree(IGraph graph, CostModel costModel = CostModel.EndTime) {
            this.graph = graph;

            // If no solution is found within (#vertices ^ 3) time steps, no solution exists
            // TODO: More efficient techniques exist to detect the lack of solution
            this.costLimit = (float)Math.Ceiling(Math.Pow(VertexCount, 3)); // upper bound on solution cost

            // Create one AStar instance per pawn, indexed by pawn.Index
            this.solvers = new List<AStar>();
            foreach (PawnID pawn in graph.GetPawns()) { // pawns are ordered by index
                solvers.Add(new AStar(graph, pawn, CostModel.EndTime, TieBreaker.None));
            }

            DefineCosts(costModel);
        }

        /// <summary>
        /// Defines the search cost functions, based on the provided cost model.
        /// Two cost models are defined for now:
        /// - EndTime minimizes the timespan (matches cost definition in (I)CBS papers)
        /// - SumMoves minimizes the timespan but only returns solutions that use the least possible moves
        /// </summary>
        private void DefineCosts(CostModel costModel) {
            // Heuristic cost
            // TODO: min-cut algorithm to better estimate minimum remaining cost
            Cost heuristicCost = (Solution solution) => {
                Conflict first = solution.GetFirstConflict();
                // A cardinal conflict guarantees an expected remaining cost of at least 1
                return first != null && first.IsCardinal ? 1 : 0;
            };

            // Solution cost and filtering rules for final solutions
            switch (costModel) {
                case (CostModel.EndTime):
                    solutionCost = (Solution solution) => {
                        // Cost = Maximum path timespan + minimum expected remaining cost
                        return solution.PathsDepth + heuristicCost(solution);
                    };
                    solutionYield = (Solution solution) => {
                        return solution; // no filter
                    };
                    break;
                case (CostModel.SumMoves):
                    solutionCost = (Solution solution) => {
                        // Cost = EndTime cost + tie-breaking cost to prioritize low-move solutions
                        float tieBreakingCost = solution.MoveCount / (float)maxMoveCount;
                        return solution.PathsDepth + heuristicCost(solution) + tieBreakingCost;
                    };
                    solutionYield = (Solution solution) => {
                        return solution.FilterExtraMoves(); // filter non minimum-move paths
                    };
                    break;
                default:
                    throw new NotImplementedException("Unknown cost model.");
            }
        }

        /// <summary>
        /// Creates the root node of the tree, and computes its initial solution.
        /// </summary>
        /// <returns>True if a solution was successfully found for each node, false otherwise.</returns>
        private bool CreateRoot() {
            root = new Node(); // Root of the search tree

            // Init performance metrics
            this.exploredTotal = 0;
            this.exploredLast = 0;
            this.exploredTotalAStar = 0;

            // Compute root solution (shortest paths without constraints) for each pawn
            foreach (PawnID pawn in graph.GetPawns()) {
                var pawnSolution = solvers[pawn].Search(null);
                if (pawnSolution == null)
                    return false; // no solution found for root
                root.SetPawnPaths(pawn, pawnSolution);
            }

            openSet = new SimplePriorityQueue<Node, float>(); // Set of nodes to explore (low cost=high priority)
            openSet.Enqueue(root, solutionCost(root.GetSolution())); // mark root to be explored
            return true; // solution found for root
        }

        /// <summary>
        /// Generates all conflict-free, minimum-cost solutions.
        /// </summary>
        public IEnumerable<Solution> Search() {
            // Attempt to create root node
            if (!CreateRoot())
                yield break; // no solution at root -> no solution at all

            // Explore all nodes in order of priority
            while (openSet.Count > 0) {
                var node = openSet.Dequeue(); // highest priority (lowest cost) node
                var nodeSolution = node.GetSolution();
                var nodeCost = solutionCost(nodeSolution);

                // Performance metrics
                exploredLast++;
                exploredTotal++;

                // If priority node has cost higher (by maxExtraCost or more) than optimal solution
                if (nodeCost > costLimit) {
                    yield break; // stop looking for solutions
                }

                // Get the most important conflict of that solution
                var conflict = nodeSolution.GetFirstConflict();

                // If there are no constraints, there are no conflicts and the solution was found
                if (conflict == null) {
                    node.IsFinal = true; // mark parent as a final node (a working solution)
                    costLimit = Math.Min(costLimit, nodeCost);
                    yield return solutionYield(nodeSolution);
                    exploredLast = 0;
                    continue;
                } else {
                    Split(node, conflict);
                }
            }

            yield break; // no (more) solutions exist
        }

        /// <summary>
        /// Given a tree node and a conflict, creates children nodes for each pawn involved in the conflict.
        /// </summary>
        /// <param name="node">Tree node in which the conflict was selected.</param>
        /// <param name="conflict">Conflict appearing in node's paths, to be avoided in children nodes.</param>
        private void Split(Node node, Conflict conflict) {
            exploredLastAStar = 0;

            // For each pawn involved in the conflict
            foreach (var pawn in conflict.pawns) {
                // Create a new node with that additional constraint
                var child = new Node(node, pawn, conflict.Constraint);

                // Recompute a solution for that pawn, with all of its constraints
                var pawnPaths = solvers[pawn].Search(child.GetConstraints(pawn), child.GetSolution().PathsDepth);
                exploredLastAStar += solvers[pawn].PeekExpandedNodes(); // (metrics)

                // If there is no solution, no child is created
                if (pawnPaths == null)
                    continue;

                // Remember the solution and mark the node as explorable
                var otherConstraints = child.GetSolution().AsConstraints();
                child.SetPawnPaths(pawn, pawnPaths.MinConflictPaths(otherConstraints)); // TODO add as tie-breaking cost in A* ?
                openSet.Enqueue(child, solutionCost(child.GetSolution()));
            }
            exploredTotalAStar += exploredLastAStar;
        }

        /// <summary>
        /// Returns the number of CBS nodes explored during the last search.
        /// </summary>
        /// <param name="total">If true, returns the total number explored over all searches instead.</param>
        public int PeekExploredNodes(bool total = false) {
            if (total)
                return exploredTotal;
            else
                return exploredLast;
        }

        /// <summary>
        /// Returns the number of A* nodes explored during the last search.
        /// </summary>
        /// <param name="total">If true, returns the total number explored over all searches instead.</param>
        /// <returns></returns>
        public int PeekExploredNodesAStar(bool total = false) {
            if (total)
                return exploredTotalAStar;
            else
                return exploredLastAStar;
        }
    }

}